#!/bin/bash

# docker install script
function dockerbay-install-docker() {
    if [ -d "~/docker-bay/" ];then
        echo "$(echo ~/docker-bay) not found, exiting.."
    else
        chmod +x ~/docker-bay/.dockerbay/make-the-install.sh \
        && sudo ~/docker-bay/.dockerbay/./make-the-install.sh
    fi
}

# docker-bay deployement
function dockerbay-deploy() {
    if [ $# -eq 0 ];then
        echo -e "No arguments supplied, you need to specify\ndockerbay-deploy starter"
    else
        if [ -d "~/docker-bay/" ];then
            echo "$(echo ~/docker-bay) not found, exiting.."
        else
        mode=$1
        chmod +x ~/docker-bay/.dockerbay/make-the-deploy.sh \
            && ~/docker-bay/.dockerbay/./make-the-deploy.sh $mode
        fi
    fi
}

#perform a docker-compose up / docker-compose up -d in a docker-bay container dir
function dockerbay-up() {
    SERVICE=$1
    shift

    if [ ! -d ~/docker-bay/services/"$SERVICE" ];then
        echo "$(echo ~/docker-bay/services)/$SERVICE is not a valid dir, exiting.."

    elif [ ! -f ~/docker-bay/services/"$SERVICE"/docker-compose.yml ] && [ ! -f ~/docker-bay/services/"$SERVICE"/docker-compose.yaml ];then
        echo "docker-compose.yml not found in $(echo ~/docker-bay/services)/$SERVICE, exiting.."

    else
        if [ -f ~/docker-bay/services/"$SERVICE/.env" ];then
            up-with-dot-env $SERVICE
            cd ~/docker-bay/services/$SERVICE \
            && docker-compose up $@ \
            && cd ~/  
        else
            cd ~/docker-bay/services/$SERVICE \
            && docker-compose up $@ \
            && cd ~/ 
        fi

    fi
}

function up-with-dot-env(){

    LOCATION=~/docker-bay/services/$SERVICE/
    FILE=$LOCATION.env

    # iterate over each line of the file
    while read p; do

        # spliting the current line
        IFS='=' read -ra CURRENT_LINE <<< "$p"

        KEY=${CURRENT_LINE[0]}
        VALUE=${CURRENT_LINE[1]}

        # Example to loop over the splited line
        # for i in "${CURRENT_LINE[@]}"; do
        #     # process "$i"
        #     echo $i
        # done

        if [ -z "$VALUE" ];then

            echo -e "WARNING: $KEY must be defined\nplease set a value:"
            read INPUT </dev/tty
            sed -i -e "s/$KEY=/$KEY=$INPUT/g" $FILE
            
        else
            if [ "$DISPLAY_DEFINED_KEY" == 1 ];then
            echo "$KEY is set on : $VALUE"
            fi
        fi

    done <$FILE

}

#perform a docker-compose down in a docker-bay container dir
function dockerbay-down() {
    if [ ! -d ~/docker-bay/services/"$1" ];then
        echo "$(echo ~/docker-bay/services)/$1 is not a valid dir, exiting.."

    elif [ ! -f ~/docker-bay/services/"$1"/docker-compose.yml ];then
        echo "docker-compose.yml not found in $(echo ~/docker-bay/services)/$1, exiting.."

    else
        cd ~/docker-bay/services/$1 \
            && docker-compose down \
            && cd ~/
    fi
}

#delete a docker-bay volume
function dockerbay-delete-volume() {
    if [ ! -d ~/docker-bay/volumes/"$1" ];then
        echo "$(echo ~/docker-bay/volumes)/$1 is not a valid dir, exiting.."
    else
        sudo rm -rf ~/docker-bay/volumes/$1
        echo "$(echo ~/docker-bay/volumes)/$1 deleted, exiting.."
    fi
}

#give permission to the current user on a docker-bay dir
function dockerbay-permission() {
    if [ ! -d ~/docker-bay/"$1" ];then
        echo "$(echo ~/docker-bay)/$1 is not a valid dir, exiting.."
    else
        userUID=$UID
        user=$USER
        sudo chown -R $userUID:$userUID ~/docker-bay/"$1"
        echo -e "Recursive chown was made on : $(echo ~/docker-bay)/$1 \nFor user : $user with UID : $userUID"
    fi
}

#make a ssh tunnel to the given container 
function dockerbay-tunnel() {
    docker exec -it $@ sh -c "stty rows 50 && stty cols 150 && bash"
}

#perform a docker system prune all
function dockerbay-prune() {
    docker system prune -a
}

#stop all docker container
alias dockerbay-stop-all-container='sudo docker stop $(sudo docker ps -a -q)'

#delete all docker container
alias dockerbay-delete-all-container='sudo docker rm $(sudo docker ps -a -q)'

#delete all docker images
alias dockerbay-delete-all-image='sudo docker rmi $(sudo docker images -q)'

#perform a docker system prune all
alias dockerbay-prune='docker system prune -a'

#stop and delete all docker container, delete all images, perform a system prune all
alias dockerbay-armagueddon='dockerbay-stop-all-container && dockerbay-delete-all-container && dockerbay-delete-all-image && docker system prune --volumes'